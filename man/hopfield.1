.TH HOPFIELD 1
.SH NAME
.PD 0
.TP
hopfield \- solve a task assignment problem via a Hopfield network
.PD 1
.SH SYNOPSIS
.PD 0
.TP
.B hopfield \fB-help
.LP
\ \ or
.TP
.B hopfield
\fB[\-specs \fIstring\fP]
[\-dt \fIdouble\fP]
[\-tau \fIdouble\fP]
[\-gain \fIdouble\fP]
[\-scale \fIdouble\fP]
[\-seed \fIinteger\fP]
[\-steps \fIinteger\fP]
[\-gray \fIinteger\fP]
[\-inv]
[\-mag \fIinteger\fP]
[\-term \fIstring\fP]
.PD 1
.SH DESCRIPTION
Solve a task assignment problem via a Hopfield neural network while 
plotting the activations of the neurons over time.  The program uses 
the K-out-of-N rule for setting the external inputs and synapse 
strength of the neurons. 
.SH OPTIONS
.IP \fB\-specs\ \fIstring\fP
Problem specification file.
.IP \fB\-dt\ \fIdouble\fP
Time step increment.
.IP \fB\-tau\ \fIdouble\fP
Decay term.
.IP \fB\-gain\ \fIdouble\fP
Sigmoidal gain.
.IP \fB\-scale\ \fIdouble\fP
Scaling for inputs.
.IP \fB\-seed\ \fIinteger\fP
Random seed for initial state.
.IP \fB\-steps\ \fIinteger\fP
Number of time steps.
.IP \fB\-gray\ \fIinteger\fP
Number of gray levels.
.IP \fB\-inv
Invert all colors?
.IP \fB\-mag\ \fIinteger\fP
Magnification factor.
.IP \fB\-term\ \fIstring\fP
How to plot points.
.SH MISCELLANY
As mentioned before, the weights and external inputs are set
according to the K-out-of-N rule which states that if we have N
neurons in a mutually connected sub-network and that we wish this
subset to converge with exactly K neurons activated, then each
neuron should be connected to every other neuron with a weights
of -2 and receive an external input of (2K - 1).  Since we must
produce solutions that look like permutation matrices, each
neuron is in 2 K-out-of-N subsets, one for the column and one for
the row.  Thus, all neurons inhibit all other neurons in the same
column or row with -2 and must (on average) receive a net input
of 2 since they are all in two sets.  The external inputs are
slightly adjusted to favor neurons that represent more productive
task performers.  See the source code for more details.
.SH BUGS
No sanity checks are performed to make sure that any of the
options make sense.

The final cost of the solution is printed at the end of the
simulation; however, no check is done to insure that the system
has actually converged.  Hence, it may print out nonsense
results.
.SH AUTHOR
Copyright (c) 1997, Gary William Flake.

Permission granted for any use according to the standard GNU
``copyleft'' agreement provided that the author's comments are
neither modified nor removed.  No warranty is given or implied.
